apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: nintendo-cluster-info
  namespace: default
spec:
  steps:
    - name: cluster-info
      image: alpine/k8s:1.28.4
      script: |
        #!/bin/sh
        echo "ðŸŽ®âš“ Nintendo Switch K3s Cluster Information ðŸŽ®âš“"
        echo "============================================="
        echo
        echo "Cluster Nodes:"
        kubectl get nodes -o wide
        echo
        echo "Node Labels (Nintendo Switch):"
        kubectl get nodes -l hardware=nintendo-switch --show-labels
        echo
        echo "Cluster Resources:"
        kubectl get all --all-namespaces | head -20
        echo
        echo "This pipeline is running on:"
        echo "Node: $(hostname)"
        echo "Architecture: $(uname -m)"
        echo "Kernel: $(uname -r)"
        echo
        echo "âœ… Nintendo Switch K3s Cluster is working! ðŸŽ®âš“"
---
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: nintendo-workload-test
  namespace: default
spec:
  steps:
    - name: cpu-test
      image: alpine:latest
      script: |
        #!/bin/sh
        echo "ðŸŽ® Running CPU intensive test on Nintendo Switch cluster..."
        echo "Calculating Ï€ to 1000 digits..."
        start_time=$(date +%s)
        
        # Simple Ï€ calculation using bc
        apk add --no-cache bc >/dev/null 2>&1
        pi=$(echo "scale=1000; 4*a(1)" | bc -l)
        
        end_time=$(date +%s)
        duration=$((end_time - start_time))
        
        echo "âœ… Calculation completed in ${duration} seconds"
        echo "Running on: $(hostname)"
        echo "Architecture: $(uname -m)"
        echo "Ï€ (first 50 digits): $(echo $pi | cut -c1-50)..."
---
apiVersion: tekton.dev/v1beta1
kind: Pipeline
metadata:
  name: nintendo-cluster-demo
  namespace: default
spec:
  tasks:
    - name: cluster-info
      taskRef:
        name: nintendo-cluster-info
    - name: workload-test
      taskRef:
        name: nintendo-workload-test
      runAfter:
        - cluster-info
---
apiVersion: tekton.dev/v1beta1
kind: Pipeline
metadata:
  name: nintendo-arm64-build
  namespace: default
spec:
  workspaces:
    - name: shared-data
  tasks:
    - name: prepare-environment
      taskSpec:
        workspaces:
          - name: output
        steps:
          - name: setup
            image: alpine:latest
            workingDir: $(workspaces.output.path)
            script: |
              #!/bin/sh
              echo "ðŸŽ® Preparing ARM64 build environment on Nintendo Switch..."
              echo "Node: $(hostname)"
              echo "Architecture: $(uname -m)"
              
              # Create a simple ARM64 optimized application
              cat > hello-nintendo.c << 'EOF'
              #include <stdio.h>
              #include <unistd.h>
              
              int main() {
                  printf("ðŸŽ® Hello from Nintendo Switch ARM64 K3s Cluster! ðŸŽ®\n");
                  printf("Process ID: %d\n", getpid());
                  printf("Architecture: ARM64\n");
                  printf("Platform: Nintendo Switch K3s Worker\n");
                  return 0;
              }
              EOF
              
              echo "âœ… Source code prepared"
              ls -la
      workspaces:
        - name: output
          workspace: shared-data
    
    - name: build-arm64
      taskSpec:
        workspaces:
          - name: source
        steps:
          - name: compile
            image: alpine:latest
            workingDir: $(workspaces.source.path)
            script: |
              #!/bin/sh
              echo "ðŸ”¨ Building ARM64 application on Nintendo Switch..."
              
              # Install build tools
              apk add --no-cache gcc musl-dev
              
              # Compile for ARM64
              gcc -o hello-nintendo hello-nintendo.c -static
              
              echo "âœ… Build completed"
              echo "Binary info:"
              file hello-nintendo
              ls -la hello-nintendo
              
              echo "ðŸš€ Running the application:"
              ./hello-nintendo
      workspaces:
        - name: source
          workspace: shared-data
      runAfter:
        - prepare-environment
